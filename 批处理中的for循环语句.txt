批处理中的for循环语句
 
一、前言
　　在批处理中，for是最为强大的命令语句，它的出现，使得解析文本内容、遍历文件路径、数值递增/递减等操作
成为可能；配合if、call、goto等流程控制语句，更是可以实现脚本复杂的自动化、智能化操作；合理使用for语句,
还能使代码大为简化，免除各位编写大量重复语句之苦。而能否熟练使用for语句,已经成为衡量一个人批处理水平高
低最主要的标准。
二、for语句的基本用法
　　正如色彩缤纷的七彩光芒是由红绿蓝三原色构成的一样，最复杂的for语句，也有其基本形态，它的模样是这样
的：
　　在cmd窗口中：for %I in (command1) do command2
　　在批处理文件中：for %%I in (command1) do command2
　　之所以要区分cmd窗口和批处理文件两种环境，是因为在这两种环境下,命令语句表现出来的行为虽然基本一样，
但是在细节上还是稍有不同，最明显的一个差异就是：在cmd窗口中，for之后的形式变量I必须使用单百分号引用，
即%I；而在批处理文件中，引用形式变量I必须使用双百分号，即%%I。为了方便起见，若不是特别强调，以下的讲解
都以批处理文件环境为例。
　　我们先来看一下for语句的基本要素都有些什么：
　　1、for、in和do是for语句的关键字，它们三个缺一不可；
　　2、%%I是for语句中对形式变量的引用，就算它在do后的语句中没有参与语句的执行，也是必须出现的；
　　3、in之后，do之前的括号不能省略；
　　4、command1和command2表示字符串、变量或命令语句；
　　现在，你可能已经会写一个简单的for语句了，比如：
[code1]
@echo off
for %%I in (bbs.bathome.cn) do echo %%I
pause
　　保存为批处理文件并执行，将会在弹出的批处理窗口中看到这样的信息：
[result1]
bbs.bathome.cn
请按任意键继续...
　　很快地，你会觉得这个for语句是如此的简单，简单到你丝毫感受不出它的强大：这个for语句，和我直接用echo
语句没什么两样啊！
　　是的，演示代码永远都只是演示而已，就像大多数高级语言的教科书一样，在引导新手学习的时候，基本上都是
千篇一律地告诉大家如何编写一个能显示 hello world! 的窗口，从这些演示代码中，你看不到它们具有多少实用性
，你只是感到有点好奇：咦，居然弹出了一个窗口？片刻之后，你就会觉得索然无味。
　　那好吧，为了让大家对for更加感兴趣，我们先来分析一下for语句的一些注意事项，之后，再让大家看看更为强
大的for语句实例。
　　1、for语句的形式变量I，可以换成26个字母中的任意一个，这些字母会区分大小写，也就是说，%%I和%%i会被
认为不是同一个变量；形式变量I还可以换成其他的字符，但是，为了不与批处理中的%0～%9这10个形式变量发生冲
突，请不要随意把%%I替换为%%0 ～%%9中的任意一个；
　　2、in和do之间的command1表示的字符串或变量可以是一个，也可以是多个，每一个字符串或变量，我们称之为
一个元素，每个元素之间，用空格键、跳格键、逗号、分号或等号分隔；
　　3、for语句依次提取command1中的每一个元素，把它的值赋予形式变量I,带到do后的command2中参与命令的执行
；并且每次只提取一个元素，然后执行一次do后的命令语句，而无论这个元素是否被带到command2中参与了command2
的运行；当执行完一次do后的语句之后，再提取command1中的下一个元素，再执行一次command2，如此循环，直到
command1中的所有元素都已经被提取完毕，该for语句才宣告执行结束；
　　其中，第3点是最为关键的，它描述了for语句的执行过程，是for语句的精髓所在，大家一定要牢记这一条，才
能深刻理解更为复杂的for流程。
　　有了以上的基础，我们再来看一个例子，这个例子修改了code1的部分内容，结果将大不一样：
[code2]
@echo off
for %%I in (bbs,bathome,cn) do echo %%I
pause
　　和[code1]的执行结果相比，[code2]的执行结果发生了如下变化：
　　1、显示结果分成了3行（不算最后一行中文提示）；
　　2、每一行都从逗号处被切分；
　　如果把 bbs.bathome.cn 这个字符串中的点号换为空格、跳格或等号,执行结果将和code2的执行结果别无二致。
　　现在，我们来分析一下code2代码中for语句的执行过程：
　　首先，for语句以逗号为分隔符，把 bbs,bathome,cn 这个字符串切分成三个元素：bbs、bathome和cn，由此决
定了do后的语句将会被执行3次；
　　然后，第一次执行过程是这样的：先把 bbs 这个字符串作为形式变量I的值，带入do后的语句中加以执行，也就
是执行 echo %%I 语句，此时的I值为bbs，因此，第一次执行的结果，将会在屏幕上显示bbs这个字符串；第二次执
行和第一次执行的过程是一样的，只不过此时I的值已经被替换为command1中的第二个元素了，也就是 bathome 这个
字符串；如此循环，当第三次echo执行完毕之后，整条for语句才算执行完毕，此时，将执行下一条语句，也就是
pause命令。
　　其实，这个例子只比上一个例子多了一点花样，有趣了那么一点点：一条for语句的执行结果居然被分成了3行！
　　为了让大家见识一下for的真正威力，本人绞尽脑汁，翻帖无数，不得要领，万般无奈之下，只好亮出了尘封在
箱底多年的一段代码：检测当前硬盘都有哪些分区^_^
[code3]
@echo off
set str=c d e f g h i j k l m n o p q r s t u v w x y z
echo 当前硬盘的分区有：
for %%i in (%str%) do if exist %%i: echo %%i:
pause
　　这段代码能检测硬盘都有哪些分区，包括U盘和移动硬盘的分区，但是，当光驱中有盘的时候，也会被列出来，
这是本代码的一个缺憾，在以后的讲解中，我将向大家讲述如何消除这个瑕疵，敬请关注本系列的后续章节。
　　高级应用：
　　想知道当前目录下都有哪些文件吗？请用下面的代码：
@echo off
for %%i in (*.*) do echo "%%i"
pause
　　想列出当前目录下所有的文本文件吗？请用下面的代码：
@echo off
for %%i in (*.txt) do echo "%%i"
pause
　　想列出只用两个字符作为文件名的文本文件吗？请用下面的代码：
@echo off
for %%i in (??.txt) do echo "%%i"
pause
　　题外话：
　　1、列出当前目录下各种文件的方法，最简单的还是用dir命令，但是，从以上代码中，各位可以加深对for语句
执行流程的理解（用到了通配符*和?）；
　　2、注意：以上代码不能列出含有隐藏或系统属性的文件；
　　练习：用for语句建立test1.txt、test2.txt和test3.txt三个文本文件。
更全面的练习请看这个帖子：for语句从入门到精通配套练习题 http://bbs.bathome.cn/thread-2336-1-1.html
-----------------------------------------------------------------------------------------------------
三、文本解析显神威：for /f 用法详解
　　前言
　　for /f 是个十分强大的家伙。
　　如果说，for语句是批处理中最强大的语句的话，那么，for /f 就是精华中的精华。
　　for /f 的强大，和它拥有众多的开关密切相关。因为开关众多，所以用法复杂，本章将分成若干小节，为大家
逐一介绍强大的 for /f 语句。
-----------------------------------------------------------------------------------------------------

（一） 为解析文本而生：for /f 的基本用法
　　所有的对象，无论是文件、窗体、还是控件，在所有的非机器语言看来，无外乎都是形如"c:\test.txt"、"CWnd"
之类的文本信息；而所有的对象，具体的如ini文件中的某条配置信息、注册表中的某个键
值、数据库中的某条记录……都只有转化为具有一定格式的文本信息，方可被代码识别、操控。可以说，编程的很大
一部分工作，都是在想方设法绞尽脑汁如何提取这些文本信息。
　　而提取文本信息，则是for /f的拿手好戏：读取文件内容；提取某几行字符；截取某个字符片段；对提取到的内
容再切分、打乱、杂糅……只要你所能想到的花样，for /f 都会想方设法帮你办到，因为，for /f 就是被设计成专
门用于解析文本的。
　　先来看个例子。
　　假如有个文本文件test.txt，内容如下：
[txt1]
论坛的目标是：不求最大，但求最好，做最实用的批处理论坛。
论坛地址：bbs.bathome.cn。
这里是：新手晋级的福地，高手论剑的天堂。　　
那么，将如下代码保存为test.cmd，并放在test.txt同一目录下运行，将会在屏幕上原样显示test.txt的内容：
[code4]
@echo off
for /f %%i in (test.txt) do echo %%i
pause　　
这段代码，主要是让你树立这样一种观念：读取文本文件的内容，请使用 for /f 语句！
　　进阶话题：for /f 语句是把整个test.txt一次性显示出来的？
　　在这段代码中，虽然执行结果是把test.txt中的所有内容都显示出来了，貌似 for /f 语句是把整个test.txt一
次性显示到屏幕上，实际上并非如此。
　　无论for语句做何种变化，它的执行过程仍然遵循基本的for流程：依次处理每个元素，直到所有的元素都被处理
为止。只不过在for /f语句中，这里的元素是指文件中的每一行，也就是说，for /f 语句是以行为单位处理文本文
件的。这是一条极为重要的规则，在上一章中也强调过它的重要性，希望在接下来的学习过程中，你能时刻牢记这一
原则，那么，很多问题将会迎刃而解。以下是验证这一说法的演示代码（在[code4]的基础上添加了&pause语句）：
[code5]
@echo off
for /f %%i in (test.txt) do echo %%i&pause
pause　　　　
-----------------------------------------------------------------------------------------------------

（二） 切分字符串的利器：delims=
　　也许你对[code4]这段代码不屑一顾：不就是把test.txt的内容显示出来了么？好像用处不大啊。
　　好吧，我们来玩个魔术。
　　还是[txt1]这段文本，把[code4]改造一下：
[code6]
@echo off
for /f "delims=," %%i in (test.txt) do echo %%i
pause　　
再次运行test.cmd，看到什么变化了吗？！
[result2]
论坛的目标是：不求最大
论坛地址：bbs.bathome.cn。
这里是：新手晋级的福地
请按任意键继续...　　
结果，你惊奇地发现，每行第一个逗号之后的所有内容都不见了（如果有不存在逗号的行，则保留原样），也就说，
你成功地提取到了每行第一个逗号之前的所有内容！
　　试想一下，这段代码会有什么用呢？
　　如果别人给了你一个软件清单，每行都是"英文软件名（逗号）中文软件名"的格式，而你却只想保留英文名的时
候，这段代码将是多么有用啊！再假设，有这么一个IP文件，第一列是数字格式的IP地址，第二列是具体的空间地址
，列与列之间用逗号分隔，而你想提取其中数字格式的IP，呵呵，我不说你也知道该怎么办了吧？
　　要是文本内容不是以逗号分隔，而是以其他符号分隔，那么，把"delims=,"的逗号换成相应的符号就可以了。
　　在这里，我们引入了一个新的开关："delims=，"，它的含义是：以逗号作为被处理的字符串的分隔符号。
　　在批处理中，指定分隔符号的方法是：添加一个形如 "delims=符号列表" 的开关，这样，被处理的每行字符串
都会被符号列表中罗列出来的符号切分开来。
　　需要注意的是：如果没有指定"delims=符号列表"这个开关，那么，for /f 语句默认以空格键或跳格键作为分隔
符号。请把[txt1]中不同位置上的标点符号改为空格或跳格，再运行[code4]试试。
　　进阶话题：如果我要指定的符号不止一个，该怎么办？
　　在上面的讲解中，我提到了指定分隔符号的方法：添加一个形如"delims=符号列表"的开关。不知道你注意到没
有，我的说法是"符号列表"而非"符号"，这是大有讲究的，因为，你可以一次性指定多个分隔符号！
　　还是以[txt1]为例，把[code6]再改造一下：
[code7]
@echo off
for /f "delims=.，" %%i in (test.txt) do echo %%i
pause　　
结果显示：
[result3]
论坛的目标是：不求最大
论坛地址：bbs
这里是：新手晋级的福地
请按任意键继续...　　
这样，第一个点号或第一个逗号之前的内容都被提取出来了。
　　[code7]的执行过程是：逐行读取test.txt中的内容，以点号和逗号切分每一行的内容（不存在点号和逗号的行
，则不再切分，为了描述的方便，我们把被点号或逗号切分的一个一个的字符串片段，称之为节），然后，for /f 
会提取第一节的内容作为最终结果，显示在屏幕上。需要注意的是，在这里，所有行的字符串被切分成了两个以上的
节，但是，[code7]的代码只会提取第一节字符串的内容，因为 for /f 语句默认只提取第一节的符串。